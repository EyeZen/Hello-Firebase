// - async/await does not work with forEach => does not allow await, gives promises

// import user account from a file to firebase project
// - firebase auth:import users.json --hash-algo=scrypt --rounds=8 --mem-cost=14

//////////////////////////////////////
//      custom token sign-in        //
//////////////////////////////////////

// server
const admin = require('firebase-admin')
const app = admin.initializeApp()
const uid = 'some-uid';
admin.auth()
  .createCustomToken(uid)
  .then(customToken=>{
    // send token back to client
    // res.status(201).json({ token: customToken })
  })
  .catch(err=>console.error(err));

//-------------------------------------------
// client-namespaced
const firebase = require('firebase');

firebase.auth().signInWithCustomToken(/* token-from-server */)
  .then(userCredential=>{
    // signed-in
    var user = userCredential.user;
    // ...
  })
  .catch(err=>console.error(err));
  
// ++++++++++++++++++++++++++++++++++++++++++
// client-modular
import { getAuth, signInWithCustomToken } from 'firebase/auth'

const auth = getAuth();

// - input userInfo = { email, password }
// - send userInfo to server
// - receive token from server
// - sign-in with token

signInWithCustomToken(auth, /*token-from-server*/)
  .then(userCredential => {
    // Signed in
    const user = userCredential.user;
    // ...
  })
  .catch(err => console.error(err));


////////////////////////////////////////////////////////
// using and verifying id-token generated by firebase //
////////////////////////////////////////////////////////

// server
const admin = require('firebase-admin');
const app = admin.initializeApp();
admin.auth().verifyIdToken(/* token-from-client */)
  .then(decodedToken => {
    const uid = decodedToken.uid;
    // ...
  })
  .catch(err=>console.error(err));

// client-namespaced
const firebase = require('firebase');
firebase.auth().currentUser
  .getIdToken(/* force-refresh */ true)
  .then(idToken => {
    // send token to server
    // ...
  })
  .catch(err => console.error(err));


//////////////////////////////////
//       firebase rules         //
//////////////////////////////////
// firestore
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read, write: if
          request.time < timestamp.date(2022, 5, 14);
    }
  }
}
// storage
rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    match /{allPaths=**} {
      allow read, write: if request.auth!=null;
    }
  }
}
service firebase.storage {
  match /b/{bucket}/o {
    match /images/{imageId} {
      // Only allow uploads of any image file that's less than 5MB
      allow write: if request.resource.size < 5 * 1024 * 1024
                   && request.resource.contentType.matches('image/.*');
    }
  }
}

service firebase.storage {
  match /b/{bucket}/o {
    match /{allPaths=**} {
      // public
      allow read, write;
    }
  }
}

